// generateContent.v2.mjs
import { createClient } from '@supabase/supabase-js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import 'dotenv/config';

// --- C·∫§U H√åNH ---
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;
const geminiApiKey = process.env.GEMINI_API_KEY;

if (!supabaseUrl || !supabaseServiceKey || !geminiApiKey) {
  throw new Error("Missing environment variables in .env file.");
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);
const genAI = new GoogleGenerativeAI(geminiApiKey);
// QUAN TR·ªåNG: Quay l·∫°i model ·ªïn ƒë·ªãnh v·ªõi gi·ªõi h·∫°n t·ªët h∆°n
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });

// H√ÄM M·ªöI: T·ª± ƒë·ªông "ngh·ªâ" ƒë·ªÉ tr√°nh l·ªói 429
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
// ƒê·∫∑t th·ªùi gian ngh·ªâ (30 gi√¢y) ƒë·ªÉ an to√†n v·ªõi gi·ªõi h·∫°n 2 RPM
const API_CALL_DELAY = 30000; 

// --- H√ÄM TI·ªÜN √çCH ƒê·ªÇ G·ªåI GEMINI AN TO√ÄN ---
async function generateJsonFromGemini(prompt) {
  console.log("   ...ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini (s·∫Ω m·∫•t m·ªôt l√∫c)...");
  const result = await model.generateContent(prompt);
  const text = result.response.text();
  const cleanedText = text.replace(/```json|```/g, '').trim();
  try {
    return JSON.parse(cleanedText);
  } catch (e) {
    console.error("L·ªói parse JSON t·ª´ Gemini:", cleanedText);
    throw new Error("Gemini did not return valid JSON.");
  }
}

// --- C√ÅC H√ÄM T·∫†O N·ªòI DUNG (ƒê√É N√ÇNG C·∫§P PROMPT) ---

async function createActivitiesForLesson(lessonId, lessonTitle, courseType) {
  console.log(`   ‚û°Ô∏è  ƒêang t·∫°o c√°c ho·∫°t ƒë·ªông ƒêA D·∫†NG cho b√†i h·ªçc: "${lessonTitle}"`);
  
  // Prompt n√†y l√† tr√°i tim c·ªßa s·ª± thay ƒë·ªïi, h∆∞·ªõng d·∫´n Gemini t·∫°o ra c√°c lo·∫°i quiz kh√°c nhau
  const activitiesPrompt = `
    Create 5 highly diverse and effective learning activities for a language lesson titled "${lessonTitle}".
    The activities must be a mix of the following types: LESSON_CONTENT, QUIZ_MCQ, FILL_IN_BLANK, SENTENCE_SCRAMBLE, SENTENCE_TRANSLATION.
    Return a single valid JSON array. Each object must have "activity_type" and "content" keys, following these exact structures:
    - LESSON_CONTENT: {"html_content": "An HTML explanation of a key grammar point or vocabulary set related to the lesson title."}
    - QUIZ_MCQ: {"title": "Multiple Choice Quiz", "question_text": "A relevant question", "options": ["A", "B", "C", "D"], "correct_answer": "A"}
    - FILL_IN_BLANK: {"sentence_parts": ["Part one of the sentence ", " part two."], "correct_answer": "missing word"}
    - SENTENCE_SCRAMBLE: {"scrambled_words": ["word1", "word2", "word3"], "correct_sentence": "word1 word2 word3"}
    - SENTENCE_TRANSLATION: {"source_sentence": "The sentence in Vietnamese to be translated.", "target_sentence": "The correct translation."}
  `;

  const activitiesData = await generateJsonFromGemini(activitiesPrompt);

  const activitiesToInsert = activitiesData.map((act, index) => ({
    lesson_id: lessonId,
    order: index + 1,
    activity_type: act.activity_type,
    content: act.content,
    xp_reward: 25,
  }));

  const { error } = await supabase.from('activities').insert(activitiesToInsert);
  if (error) throw error;
  console.log(`     ‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${activitiesToInsert.length} ho·∫°t ƒë·ªông t∆∞∆°ng t√°c.`);
}

async function generateCourse(courseConfig) {
  console.log(`\n============== B·∫ÆT ƒê·∫¶U T·∫†O KH√ìA H·ªåC: ${courseConfig.title} ==============`);

  const coursePrompt = `
    Design a comprehensive language course with 8 detailed lesson titles based on these requirements:
    - Course Title: "${courseConfig.title}"
    - Course Description: "${courseConfig.description}"
    - Target Level: "${courseConfig.target_level}"
    The lesson titles must be engaging, specific, and logically progressive.
    Return a single valid JSON object with a "lessons" key, which is an array of 8 objects, each with a "title" key.
  `;
  
  const courseData = await generateJsonFromGemini(coursePrompt);
  
  // --- THAY ƒê·ªîI ·ªû ƒê√ÇY ---
  const { data: course, error: courseError } = await supabase
    .from('courses')
    .insert({
      title: courseConfig.title,
      description: courseConfig.description,
      target_level: courseConfig.target_level,
      image_url: courseConfig.image_url,
      language: courseConfig.language, // <-- Th√™m tr∆∞·ªùng language v√†o l·ªánh insert
    })
    .select()
    .single();
  // -----------------------

  if (courseError) throw courseError;
  console.log(` ‚úÖ ƒê√£ t·∫°o kh√≥a h·ªçc: "${course.title}" (Ng√¥n ng·ªØ: ${course.language})`);

  let lessonOrder = 1;
  for (const lessonInfo of courseData.lessons) {
    console.log(`\n--- ƒêang chu·∫©n b·ªã t·∫°o b√†i h·ªçc ${lessonOrder}/${courseData.lessons.length}. T·∫°m ngh·ªâ ${API_CALL_DELAY / 1000} gi√¢y... ---`);
    await sleep(API_CALL_DELAY);

    const { data: lesson, error: lessonError } = await supabase
      .from('lessons')
      .insert({ course_id: course.id, title: lessonInfo.title, order: lessonOrder++ })
      .select()
      .single();
    if (lessonError) throw lessonError;

    await createActivitiesForLesson(lesson.id, lesson.title, courseConfig.type);
  }
}

// --- H√ÄM main() ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ---
async function main() {
  // X√≥a c√°c kh√≥a h·ªçc c≈© ƒë·ªÉ l√†m m·ªõi (T√πy ch·ªçn)
  console.log("ƒêang x√≥a c√°c kh√≥a h·ªçc c≈©...");
  await supabase.from('courses').delete().neq('id', 0);

  await generateCourse({
    title: "Ti·∫øng Anh C2 Chuy√™n s√¢u: L√†m ch·ªß Ng√¥n ng·ªØ",
    description: "Kh√≥a h·ªçc ƒë·ªânh cao d√†nh cho ng∆∞·ªùi mu·ªën ƒë·∫°t ƒë·∫øn tr√¨nh ƒë·ªô th√¥ng th·∫°o nh∆∞ ng∆∞·ªùi b·∫£n x·ª©.",
    target_level: "C2",
    type: "C2_ENGLISH",
    language: "Ti·∫øng Anh", // <-- TH√äM TAG
    image_url: "URL_TO_A_C2_ENGLISH_IMAGE" 
  });
  
  console.log(`\n--- HO√ÄN T·∫§T KH√ìA H·ªåC ƒê·∫¶U TI√äN. T·∫°m ngh·ªâ ${API_CALL_DELAY / 1000} gi√¢y... ---`);
  await sleep(API_CALL_DELAY);

  await generateCourse({
    title: "Chinh ph·ª•c HSK 4 To√†n di·ªán",
    description: "N·∫Øm v·ªØng 1200 t·ª´ v·ª±ng v√† c√°c ƒëi·ªÉm ng·ªØ ph√°p c·ªët l√µi c·ªßa HSK 4.",
    target_level: "HSK 4",
    type: "HSK_4",
    language: "Ti·∫øng Trung", // <-- TH√äM TAG
    image_url: "URL_TO_A_HSK_4_IMAGE"
  });

  console.log("\nüéâüéâüéâ HO√ÄN T·∫§T TO√ÄN B·ªò QU√Å TR√åNH T·∫†O N·ªòI DUNG! üéâüéâüéâ");
}

main().catch(console.error);